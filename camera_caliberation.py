# -*- coding: utf-8 -*-
"""Camera_Caliberation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rakiR-iNCZ-iYU5ydNtlvKpkcYKDRssa
"""

import numpy as np
import cv2
import glob
from google.colab.patches import cv2_imshow

# Define the dimensions of the checkerboard
CHECKERBOARD = (6, 8)
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)

# Create vectors to store 3D points in real world space and 2D points in image plane.
objpoints = [] # 3d point in real world space
imgpoints = [] # 2d points in image plane.

# Prepare a known 3D coordinate system of the checkerboard
objp = np.zeros((CHECKERBOARD[0]*CHECKERBOARD[1],3), np.float32)
objp[:,:2] = np.mgrid[0:CHECKERBOARD[0],0:CHECKERBOARD[1]].T.reshape(-1,2)

# Load images, make sure the path to your images is correct and includes a wildcard to match image files
images = glob.glob('/content/drive/MyDrive/New projects/Hacklab_sols/camera_imgs/*.jpg') # Assuming your images are JPGs

for fname in images:
    img = cv2.imread(fname)
    if img is not None: # Check if image was loaded successfully
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # Find the chess board corners
        ret, corners = cv2.findChessboardCorners(gray, CHECKERBOARD, None)

        # If found, add object points, image points (after refining them)
        if ret == True:
            objpoints.append(objp)

            corners2 = cv2.cornerSubPix(gray, corners, (11,11), (-1,-1), criteria)
            imgpoints.append(corners2)

            # Draw and display the corners
            img = cv2.drawChessboardCorners(img, CHECKERBOARD, corners2, ret)
            cv2_imshow(img)
            print('img')
            cv2.waitKey(500)
    else:
        print(f"Failed to load image: {fname}") # Print an error message if image loading fails

cv2.destroyAllWindows()

# Calibrate the camera
ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

# Print the calibration parameters
print("Camera matrix : \n")
print(mtx)
print("Distortion coefficients : \n")
print(dist)

# Save the calibration results
np.savez('calibration_data', mtx=mtx, dist=dist, rvecs=rvecs, tvecs=tvecs)

# Load a test image
img = cv2.imread('/content/im_test.jpg')
h, w = img.shape[:2]
newcameramtx, roi = cv2.getOptimalNewCameraMatrix(mtx, dist, (w,h), 1, (w,h))

# Undistort the image
dst = cv2.undistort(img, mtx, dist, None, newcameramtx)

# Crop the image
x, y, w, h = roi
dst = dst[y:y+h, x:x+w]
cv2.imwrite('calibresult.png', dst)

cv2_imshow(dst)
print('calibresult')
cv2.waitKey(0)
cv2.destroyAllWindows()

"""The undistorted image (calib_result.png) should appear less distorted compared to the original images.

Based on the camera matrix:

- Focal lengths (fx, fy): 3851.17150, 3914.32526
- Optical center (cx, cy): 2064.16708, 891.491145

This matrix indicates the focal lengths and the optical center of the camera. These values are high, which is expected for a camera with a significant zoom factor or a high-resolution sensor.

Based on the distortion matrix:

- Radial distortion coefficients (k1, k2, k3): 0.291742399, -0.530679131, -11.5582992
- Tangential distortion coefficients (p1, p2): 0.00323212242, 0.00137522143

These coefficients represent the lens distortion parameters, which correct the image for barrel or pincushion distortion (radial) and correct for slight tilts and de-centering (tangential).
"""